<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Game Dev on Jen-Chieh&#39;s Website</title>
    <link>https://www.jcs-profile.com/zh-tw/tags/game-dev/</link>
    <description>Recent content in Game Dev on Jen-Chieh&#39;s Website</description>
    <generator>Hugo -- 0.147.2</generator>
    <language>zh-tw</language>
    <lastBuildDate>Mon, 29 Aug 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://www.jcs-profile.com/zh-tw/tags/game-dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Game Jam - 8月 2022</title>
      <link>https://www.jcs-profile.com/zh-tw/posts/game-dev/game-jam---aug-2022/</link>
      <pubDate>Mon, 29 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://www.jcs-profile.com/zh-tw/posts/game-dev/game-jam---aug-2022/</guid>
      <description>&lt;p&gt;時間為2022的夏季, 在7月中旬, 我一位大學朋友 (&lt;a href=&#34;https://github.com/henrykuh&#34;&gt;@henrykuh&lt;/a&gt;)
邀請我一同參與他所主辦的 Game Jam, 在其活動的主題為&lt;code&gt;驚喜 Surprise&lt;/code&gt;. 同時他也邀請我回 &lt;a href=&#34;https://github.com/MatchWorkshop&#34;&gt;火柴共作坊&lt;/a&gt;
擔任&lt;code&gt;程式區塊的負責人&lt;/code&gt;. 所以實質上, 這個 Game Jam 是用來讓我與其他在同個社群裡面的指導員
互相熟識, 以及交流的一個媒介. 這時候的我, 剛好完成了我上一份專案的開發計畫, 在沒有其他特別安排的
時期, 所以也沒有推辭, 就此決定參加很久沒參加的 Game Jam.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h3 id=&#34;-關於game-jam&#34;&gt;❓ 關於Game Jam&lt;/h3&gt;
&lt;p&gt;這個 Game Jam 的全名為 &lt;a href=&#34;https://itch.io/jam/20220829&#34;&gt;第五屆 DIY Game Jam: 驚喜 Surprise&lt;/a&gt;.
主辦單位為 &lt;a href=&#34;https://diygm2021.weebly.com/&#34;&gt;自製遊戲公會&lt;/a&gt;. 時間是&lt;code&gt;一個月&lt;/code&gt;, 比一般的 COVID-19
前的 Game Jam 的時間來的長上許多. 以往 Game Jam 時間都是 &lt;code&gt;24 - 48 小時&lt;/code&gt;, 也就是一到兩天的時間
限制. 這是這個 Game Jam 相對比較特別的地方.&lt;/p&gt;
&lt;p&gt;主題很明顯的, 名稱已經洩漏了, 是&lt;code&gt;驚喜&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;-加入-認識團隊&#34;&gt;🔰 加入! 認識團隊&lt;/h3&gt;
&lt;p&gt;雖然以前我也曾短暫的待過在這 &lt;a href=&#34;&#34;&gt;火柴共作坊&lt;/a&gt; 社群, 但對於其成員並不熟識. 所以這對我是個好時機
來建立一下人派. 並且可以順便訓練溝通/協作的能力. 團隊為&lt;code&gt;5&lt;/code&gt;人成員, &lt;code&gt;1&lt;/code&gt;名企劃, &lt;code&gt;3&lt;/code&gt;名美術,
&lt;code&gt;1&lt;/code&gt;名程序. 列表如下:&lt;/p&gt;</description>
    </item>
    <item>
      <title>美術, 設計, 程式</title>
      <link>https://www.jcs-profile.com/zh-tw/posts/game-dev/art-design-programming/</link>
      <pubDate>Tue, 12 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://www.jcs-profile.com/zh-tw/posts/game-dev/art-design-programming/</guid>
      <description>&lt;p&gt;WIP&lt;/p&gt;</description>
    </item>
    <item>
      <title>遊戲裡的編程</title>
      <link>https://www.jcs-profile.com/zh-tw/posts/game-dev/programming-in-game/</link>
      <pubDate>Tue, 12 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://www.jcs-profile.com/zh-tw/posts/game-dev/programming-in-game/</guid>
      <description>&lt;p&gt;遊戲裡的編程可能是因為我就讀藝術學校, 很多人覺得我計算機領域很厲害.
我很幸運在大學裡認識了各行各界的人, 有的是大公司來進修的，有的是從
別的領域過來的. 其中做遊戲的科系很特別，因為遊戲需要的人太雜, 主要
分成三類, 美術, 設計, 程式. 關於遊戲領域我會在特別寫一篇, 在此篇先不討論.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;程式一直都是我們學校的弱點, 我們學校美術總是多於程式, 因此我在程式
方面多下了很多功夫, 也因此愛上了計算機的領域.&lt;/p&gt;
&lt;p&gt;因為我非本科生, 所以我並不知道我的見解是否完全正確. 我只知道我的一些
計算機領域的朋友以及老師都十分贊同我的想法. 首先, 計算機是很複雜的東西,
所以就算自己有什麼不懂的地方, 那很正常. 計算機是我認為其中一個最難的科
學之一, 因為其精密程度之高. 更重要的是, 人類學習機器的語言本來就比人類
學習人類的語言要難. 這也是為什麼我時常不在我非本科的朋友面前很少提工作
的事情, 因為通常的反應就是沒反應. 時常剛解釋完一個名詞就是接著解釋另一
個名詞. 畢竟是機器的東西, 所以我也不在提了.&lt;/p&gt;
&lt;p&gt;由於我是從遊戲領域那邊起家的, 對於一般的程序員來說, 本質上是有很大的不同的.
我只能說我很幸運能夠從遊戲起家, 光是一個單機遊戲就要學我認為最難的程式
語言C++. 接著學遊戲引擎，引擎又分「作業系統層」,「平台層」,「腳本層」,
「資源管理」,「渲染層」,等等.這些層級就算一天寫8小時代碼一個層級的精通
並實現代碼平均也要幾個月的時間. 這也是為什麼遊戲引擎開發時間總是大概落在最
少3年到4年之間, 而且通常可能還很簡陋. 拿個舉例, 資源管理就需要學編碼/密碼學.
然後再齊集封包, 還不提效能, 安全性, 等等.&lt;/p&gt;
&lt;p&gt;接著是線上遊戲, 就需要學Socket. 一般是不會用HTTP的, 因為那太慢. 抱歉了
寫web的大大們, 遊戲基本一定從TCP/UDP開始. 從TCP/UDP開始就會碰到基礎的
blocking IO、non-blocking IO、synchronous IO、asynchronous IO. 接著封包處理,
資料序列化, 安全性, 等等. 學完之後就是資料庫, SQL, MySQL, mongoDB, 等等.
資料庫算是整體較為簡單的, 依照遊戲可能還需要學HTML/CSS/PHP來建立官網辦
帳號, 查資料, 等等.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
